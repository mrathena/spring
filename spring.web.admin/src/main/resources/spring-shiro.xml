<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>

	<bean id="credentialsMatcher" class="com.mrathena.spring.web.admin.shiro.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="cacheManager" />
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>

	<bean id="SYSUserRealm" class="com.mrathena.spring.web.admin.shiro.SYSUserRealm">
		<property name="cachingEnabled" value="false" />
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>

	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="60000" /><!-- 1小时:3600000, 10分钟:600000, 1分钟:60000 -->
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="SYSUserRealm" />
		<property name="cacheManager" ref="cacheManager" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="rememberMeManager.cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
		<property name="rememberMeManager.cookie.maxAge" value="86400" /><!-- 30天:2592000, 7天:604800, 1天:86400. -->
	</bean>

	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter" />

	<bean id="shiro-filter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/index" />
		<property name="unauthorizedUrl" value="/unauthorize" />
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				# 资源
				/assets/**=anon
				# 系统
				/404.html=anon
				/500.html=anon
				# 登入注册登出无权限
				/login=anon
				/register=anon
				/unauthorize=anon
				/logout=logout
				# swagger2
				/swagger-ui.html=anon
				/swagger-resources/**=anon
				/webjars/**=anon
				# 其他	
				/**=user
			</value>
		</property>
	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 如上配置用于开启 Shiro Spring AOP 权限注解的支持,<aop:config proxy-target-class="true">表示代理类 -->
	<aop:config proxy-target-class="true"></aop:config>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	<!-- 
	当验证失败，其会抛出UnauthorizedException异常，此时可以使用Spring的ExceptionHandler（DefaultExceptionHandler）来进行拦截处理
	这是需要再写一个ProcessExceptionController么??
	这个需要写在父Controller中
	@ExceptionHandler({UnauthorizedException.class})
	@ResponseStatus(HttpStatus.UNAUTHORIZED)
	public ModelAndView processUnauthenticatedException(NativeWebRequest request, UnauthorizedException e) {
		ModelAndView mv = new ModelAndView();
		mv.addObject("exception", e);
		mv.setViewName("unauthorized");
		return mv;
	}
	 -->
	<!-- 
	@RequiresAuthentication:表示当前 Subject 已经通过 login 进行了身份验证；即 Subject. isAuthenticated()返回 true
	@RequiresUser:表示当前 Subject 已经身份验证或者通过记住我登录的
	@RequiresGuest:表示当前 Subject 没有身份验证或通过记住我登录过，即是游客身份
	@RequiresRoles(value={"admin", "user"}, logical= Logical.AND):表示当前 Subject 需要角色 admin 和 user
	@RequiresPermissions (value={"user:a", "user:b"}, logical= Logical.OR):表示当前 Subject 需要权限 user:a 或 user:b
	 -->

</beans>